#!/usr/bin/env python3

"""Serve website that generates PDF images"""


import argparse
import http.server
import logging
import os
import socketserver

from urllib.parse import parse_qs

from zine import PAGES, generate_pages, generate_pdf_doc, data_url_to_image

import PIL


class Handler(http.server.SimpleHTTPRequestHandler):
    """Handle GET requests, routing to private methods"""
    def do_GET(self):
        if self.path == "/":
            self._do_get_default()
        elif self.path == "/pdf":
            self._do_get_pdf()
        else:
            self._do_get_not_found()

    def _do_get_default(self):
        """Handle requests to index"""
        self.path = os.path.relpath(os.path.join(
            os.path.dirname(__file__),
            "..",
            "static",
            "index.html",
        ))
        logging.info("PATH = %s", self.path)
        return http.server.SimpleHTTPRequestHandler.do_GET(self)

    def _do_get_not_found(self):
        """Handle requests to pages that don't exist"""
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"not found")

    def _do_get_pdf(self):
        """Handle requests to generate a PDF"""
        self.send_response(200)
        self.send_header("Content-type", "application/pdf")
        self.end_headers()
        doc = generate_pdf_doc([
            PAGES.get(i)
            for i in range(16)
        ])
        self.wfile.write(doc.tobytes())

    def do_POST(self):

        # Parse as images
        content_type = self.headers['Content-Type']
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        fields = parse_qs(post_data)

        # Generate Images + PDF
        image_data_urls = [
            fields["page-{}".format(i+1).encode()][0]
            for i in range(16)
        ]

        images = [
            data_url_to_image(url)
            for url in image_data_urls
        ]

        pages = generate_pages(images)

        doc = generate_pdf_doc([
            pages.get(i)
            for i in range(16)
        ])

        # Write response
        self.send_response(200)
        self.send_header("Content-type", "application/pdf")
        self.send_header("Cache-Control", "no-store,max-age=0")
        self.end_headers()
        self.wfile.write(doc.tobytes())


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--port", type=int, default=8080)
    args = parser.parse_args()

    pil_logger = logging.getLogger('PIL')
    pil_logger.setLevel(logging.INFO)

    logging.basicConfig(level=logging.DEBUG)
    logging.info("Starting server on 0.0.0.0:%d", args.port)

    with socketserver.TCPServer(('0.0.0.0', args.port), Handler) as httpd:
        httpd.serve_forever()
